import os
import time
import requests
import urllib3
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from webdriver_manager.chrome import ChromeDriverManager

# T·∫Øt c·∫£nh b√°o SSL (v√¨ d√πng verify=False)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# ===== SETUP TR√åNH DUY·ªÜT CHROME GI·ªêNG NG∆Ø·ªúI D√ôNG TH·∫¨T =====
options = Options()
options.add_argument("--disable-blink-features=AutomationControlled")
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")
options.add_argument("--start-maximized")
options.add_argument("--disable-infobars")
options.add_argument("--disable-extensions")
options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")

# KH√îNG headless trong l·∫ßn ch·∫°y ƒë·∫ßu (Cloudflare c·∫ßn JS + cookie)
# options.add_argument("--headless")  # B·∫≠t sau khi ƒë√£ v√†o th√†nh c√¥ng n·∫øu mu·ªën

driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

# ===== T·∫¢I ·∫¢NH V√Ä T√åM LINK ISSUE SAU =====
def download_images_from_chapter(chapter_url, save_root="invincible"):
    print(f"üîó Visiting: {chapter_url}")
    driver.get(chapter_url)
    time.sleep(8)  # ƒê·ª£i JS & Cloudflare x·ª≠ l√Ω

    # Ph√°t hi·ªán b·ªã ch·∫∑n b·ªüi Cloudflare
    if "Cloudflare" in driver.title or "blocked" in driver.page_source:
        print("‚õî B·ªã ch·∫∑n b·ªüi Cloudflare, h√£y th·ª≠ ƒë·ªïi IP ho·∫∑c ƒë·ª£i v√†i ph√∫t.")
        return None

    # T·∫°o th∆∞ m·ª•c l∆∞u ·∫£nh
    chapter_name = chapter_url.strip("/").split("/")[-1]
    save_folder = os.path.join(save_root, chapter_name)
    os.makedirs(save_folder, exist_ok=True)

    # T√¨m ·∫£nh trong div.list-images
    image_elements = driver.find_elements(By.CSS_SELECTOR, "div.list-images img")
    print(f"üì∏ Found {len(image_elements)} images in {chapter_name}")

    for i, img in enumerate(image_elements):
        img_url = img.get_attribute("src")
        if not img_url or not img_url.startswith("http"):
            img_url = img.get_attribute("data-src") or img.get_attribute("alt")
        if not img_url or not img_url.startswith("http"):
            print(f"‚ö†Ô∏è Skipped invalid image at index {i}")
            continue

        try:
            img_data = requests.get(img_url, verify=False).content
            file_path = os.path.join(save_folder, f"{i+1}.jpg")
            with open(file_path, "wb") as f:
                f.write(img_data)
            print(f"‚úÖ Saved: {file_path}")
        except Exception as e:
            print(f"‚ùå Error downloading {img_url}: {e}")

    print(f"‚úÖ Completed chapter: {chapter_name}")

    # T√¨m n√∫t "Issue sau"
    try:
        next_button = driver.find_element(
            By.XPATH, '//a[@class="button primary is-small"][span[contains(text(),"Issue sau")]]'
        )
        next_href = next_button.get_attribute("href")
        return next_href
    except:
        print("‚õî Kh√¥ng t√¨m th·∫•y n√∫t 'Issue sau'. K·∫øt th√∫c.")
        return None

# ===== CH·∫†Y TO√ÄN B·ªò CH∆Ø∆†NG =====
start_url = "https://langgeek.net/invincible/chuong-1-50/"  # thay ƒë·ªïi n·∫øu c·∫ßn
current_url = start_url

while current_url:
    current_url = download_images_from_chapter(current_url)
    time.sleep(2)  # ngh·ªâ gi·ªØa c√°c chapter ƒë·ªÉ tr√°nh b·ªã block ti·∫øp

driver.quit()
print("üéâ T·∫£i xong to√†n b·ªô.")
